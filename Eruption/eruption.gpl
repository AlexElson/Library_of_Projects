//Eruption by Alex Elson
//1 . 25 . 2017

// System Variables
int window_width = 800;
int window_height = 600;
int window_x = 500;
int window_y = 100;
double window_red = 0;
double window_blue = 0;
double window_green = 0;
string window_title = "gpl Eruption - Up/Down = Angle - Left/Right = Speed";
int animation_speed = 100; // 1 is slowest, 100 is fastest

// Global variables
int size = 4; //relative size
int height = 250; //central height
int da = 2; //for faster animation, set to 4
int db = 2;
double decay = 0.00003; //taper effect

double t = 0.0;
double dt = 0.4*28; //faster animation
double dx = da*size/2.0;
double factor = size*height/2.0;
double xc = window_width/2;
double yc = window_height/2;

double rr;
double r;
double z;
int n;
int a;
int b;
int w;
double ex = 5.0;
double c;
double c1;
double c2;
double c3;

double topp[101];
double bott[101];

// Animation Handler
forward animation line_animate(rectangle cur_line);

// Create Lines
int count = 8000;
rectangle line[count];

initialization{
    for (n = 0; n < count; n += 1){

        line[n].x = floor(xc);
        line[n].y = floor(yc);

        line[n].w = size*2;
        line[n].h = 1;
        line[n].visible = false;

    }
    line[0].animation_block = line_animate;

}



animation line_animate(rectangle cur_line) {

    t = t + dt;
    w = 0;
    for (n = 0; n<=100; n+=da) {
        topp[n] = -999;
        bott[n] = 999;
    }

    for (b=-100; b<=100; b+=db) {
        for (a=0; a<=100; a+=da) {
            rr = a*a+b*b;
            r = sqrt(rr);

            //The Eruption Effect Algorithm
            z = (b*size)/ex+factor*cos(r/.1-t) / (-rr*decay)/100;

            if (z > topp[a] && r>30){
                c = (300*r-50*t)*.005;
                c1 = abs(cos(c));
                c2 = abs(cos(c*1.15));
                c3 = abs(cos(c*1.3));

                line[w].x = floor(xc+a*size);
                line[w].y = window_height-floor(yc-z);
                line[w].red = c1;
                line[w].blue = c2;
                line[w].green = c3;
                line[w].visible = true;
                w++;
                line[w].x = floor(xc-a*size);
                line[w].y = window_height-floor(yc-z);
                line[w].red = c1;
                line[w].blue = c2;
                line[w].green = c3;
                line[w].visible = true;
                w++;


                topp[a] = z;
            }

            if (z < bott[a] && r>30){
                c = (300*r-50*t)*.005;
                c1 = abs(cos(c));
                c2 = abs(cos(c*1.15));
                c3 = abs(cos(c*1.3));

                line[w].x = floor(xc+a*size);
                line[w].y = window_height-floor(yc-z);
                line[w].red = c1;
                line[w].blue = c2;
                line[w].green = c3;
                line[w].visible = true;
                w++;
                line[w].x = floor(xc-a*size);
                line[w].y = window_height-floor(yc-z);
                line[w].red = c1;
                line[w].blue = c2;
                line[w].green = c3;
                line[w].visible = true;
                w++;

                bott[a] = z;
            }

        }
    }

    //Turn all Unused Line Objects Invisible
    if (w<count){
        for(w=w;w<count;w++){
            line[w].visible = false;
        }
    }

}

//Event Handling Code
on uparrow {

    if (ex>3){
        ex = ex-.5;
    }
     
}

on downarrow {

    if (ex<20){
        ex = ex+.5;
    }
     
}

on leftarrow{

    dt -= .4;

}

on rightarrow{

    dt += .4;

}
